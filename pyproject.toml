[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tspmo"
version = "0.1.0"
description = "Technical Stock Prediction and Management Operations - Smart Stock Forecasting System"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "TSPMO Team", email = "team@tspmo.com"}
]
maintainers = [
    {name = "TSPMO Team", email = "team@tspmo.com"}
]
keywords = [
    "stock-forecasting",
    "machine-learning",
    "financial-analysis",
    "time-series",
    "chronos",
    "fastapi",
    "streamlit"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.9"
dependencies = [
    # Core Python & Frameworks
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "streamlit>=1.28.0",
    "click>=8.1.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Machine Learning & Data Science
    "torch>=2.1.0",
    "scikit-learn>=1.3.0",
    "lightgbm>=4.1.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "shap>=0.43.0",
    
    # Time Series & Chronos (Core requirement)
    "chronos-forecasting @ git+https://github.com/amazon-science/chronos-forecasting.git",
    "transformers>=4.35.0",
    "huggingface-hub>=0.19.0",
    "tokenizers>=0.15.0",
    
    # Data Sources & APIs
    "yfinance>=0.2.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "websockets>=12.0",
    "alpha-vantage>=2.3.0",
    
    # Databases & Caching
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    
    # Async Programming
    "asyncpg>=0.29.0",
    "aiofiles>=23.2.0",
    
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    
    # Job Scheduling & Background Tasks
    "apscheduler>=3.10.0",
    
    # Visualization & Charts
    "plotly>=5.17.0",
    
    # Technical Analysis
    "finta>=1.3.0",
    
    # Time & Date Utilities
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    
    # Memory & Performance
    "psutil>=5.9.0",
    
    # Retry Mechanisms
    "tenacity>=8.2.0",
    
    # Model Serialization
    "joblib>=1.3.0",
    
    # WebSocket Support
    "python-multipart>=0.0.6",
    
    # Additional Dependencies for Production
    "alembic>=1.13.0",
    "typing-extensions>=4.8.0",
    
    # Additional financial data sources
    "fredapi>=0.5.0",
    
    # Timezone handling
    "tzdata>=2023.3",
    
    # Additional async utilities
    "anyio>=4.0.0"
]

[project.optional-dependencies]
dev = [
    # Testing Framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    
    # Code Quality
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    
    # Development Tools
    "ipython>=8.16.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0"
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "pytest-mock>=3.12.0"
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0"
]

monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3"
]

[project.urls]
Homepage = "https://github.com/gil10101/tspmo"

[project.scripts]
tspmo = "src.cli.main:cli"
tspmo-api = "src.api.main:start_server"
tspmo-dashboard = "src.dashboard.main:start_dashboard"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = [
    "fastapi",
    "streamlit",
    "pandas",
    "numpy",
    "torch",
    "sklearn",
    "lightgbm",
    "chronos",
    "transformers",
    "pydantic",
    "sqlalchemy",
    "redis",
    "plotly",
    "yfinance",
    "alpha_vantage"
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "alpha_vantage.*",
    "finta.*",
    "fredapi.*",
    "chronos.*",
    "lightgbm.*",
    "shap.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "api: API tests",
    "ml: Machine learning tests",
    "data: Data pipeline tests"
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Flake8 configuration (in setup.cfg or .flake8 file)
# Note: flake8 doesn't support pyproject.toml yet

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.ruff.isort]
known-first-party = ["src"]

# Pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105"]
